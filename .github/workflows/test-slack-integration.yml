name: Test Slack Integration

on:
  workflow_dispatch: # Manual trigger only

jobs:
  test-slack:
    runs-on: ubuntu-latest

    steps:
      - name: Create mock validation output
        run: |
          # Create a mock validation output that looks like real validation issues
          cat > validation_output.txt << 'EOF'
          🔍 Running validation checks...

          📈 3 New Metrics Detected:
          bitcoin > etf-flows-arkb-v2
          ethereum > staking-rewards-percentage
          solana > validator-count-total

          📉 2 Missing Metrics Detected:
          arbitrum > transaction-count-daily
          base > tvl-total-usd

          🚫 4 Metrics with Bad Descriptions:
          solana/bad-metric-1: There are no fees on solana...
          ethereum/incomplete-desc: There is no data in this metric...
          bitcoin/empty-metric: There are no values for bitcoin...

          🔥 2 API Errors:
          /api/v1/metrics/bitcoin/price → 503 Service Unavailable
          /api/v1/metrics/ethereum/gas-price → 429 Too Many Requests

          🔍 5 Validation Issues:
            3x Missing Data
            2x Invalid Format

          Details by project:
          bitcoin:
            price: Missing Data: No data points found
            volume: Invalid Format: Expected number, got string
          ethereum:
            gas-price: Missing Data: Empty response

          📊 Validation Summary:
          Total Metrics: 168
          Projects: 11
          Categories: 6
          New Metrics: 3
          Missing Metrics: 2
          Bad Descriptions: 4
          API Errors: 2
          Validation Issues: 5

          ⚠️  Validation issues detected (see above)
          EOF

          echo "Mock validation output created"

      - name: Parse validation output for Slack
        id: parse_validation
        run: |
          output_file="validation_output.txt"

          # Extract sections exactly as the real action would
          new_metrics=$(grep -A 10 "New Metrics Detected:" "$output_file" | grep -E "^[a-z]" | head -5)
          missing_metrics=$(grep -A 10 "Missing Metrics Detected:" "$output_file" | grep -E "^[a-z]" | head -5)
          bad_descriptions=$(grep -A 5 "Metrics with Bad Descriptions:" "$output_file" | grep -E "/" | head -3)
          api_errors=$(grep -A 5 "API Errors:" "$output_file" | grep -E "→" | head -3)
          validation_issues=$(grep -A 10 "Validation Issues:" "$output_file" | grep -E "x " | head -5)

          total_metrics=$(grep "Total Metrics:" "$output_file" | grep -o '[0-9]\+' | head -1)
          projects=$(grep "Projects:" "$output_file" | grep -o '[0-9]\+' | head -1)

          # Create the exact same Slack message as production
          cat > slack_message.json << 'EOF'
          {
            "channel": "#api-docs-events",
            "username": "API Docs Bot",
            "icon_emoji": ":warning:",
            "text": "🚨 Blockworks API Validation Issues Detected",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🚨 Daily Validation Alert"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Issues were detected during the daily validation of Blockworks API metrics."
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Total Metrics:* TOTAL_METRICS_PLACEHOLDER"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Projects:* PROJECTS_PLACEHOLDER"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:* blockworks/api-docs"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Time:* $(date -u '+%Y-%m-%d %H:%M UTC')"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*📈 New Metrics Detected:*\n```NEW_METRICS_PLACEHOLDER```"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*📉 Missing Metrics:*\n```MISSING_METRICS_PLACEHOLDER```"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*🚫 Bad Descriptions:*\n```BAD_DESCRIPTIONS_PLACEHOLDER```"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*🔥 API Errors:*\n```API_ERRORS_PLACEHOLDER```"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*🔍 Validation Issues:*\n```VALIDATION_ISSUES_PLACEHOLDER```"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "⚠️ *This is a TEST message* - triggered manually for Slack integration testing"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Validation Report"
                    },
                    "url": "https://github.com/Blockworks-Projects/api-docs/actions"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Run Full Sync"
                    },
                    "url": "https://github.com/Blockworks-Projects/api-docs/actions/workflows/sync-metrics.yml"
                  }
                ]
              }
            ]
          }
          EOF

          # Replace placeholders with mock data using a safer approach
          cp slack_message.json slack_message_temp.json

          # Replace simple placeholders first
          sed -i "s/TOTAL_METRICS_PLACEHOLDER/${total_metrics:-168}/g" slack_message_temp.json
          sed -i "s/PROJECTS_PLACEHOLDER/${projects:-11}/g" slack_message_temp.json

          # Use Python for safer multi-line content replacement
          python3 << 'PYTHON_EOF'
import json
import re

# Read the JSON template
with open('slack_message_temp.json', 'r') as f:
    content = f.read()

# Define the replacement data
new_metrics = """bitcoin > etf-flows-arkb-v2
ethereum > staking-rewards-percentage
solana > validator-count-total"""

missing_metrics = """arbitrum > transaction-count-daily
base > tvl-total-usd"""

bad_descriptions = """solana/bad-metric-1: There are no fees on solana...
ethereum/incomplete-desc: There is no data in this metric...
bitcoin/empty-metric: There are no values for bitcoin..."""

api_errors = """/api/v1/metrics/bitcoin/price → 503 Service Unavailable
/api/v1/metrics/ethereum/gas-price → 429 Too Many Requests"""

validation_issues = """3x Missing Data
2x Invalid Format"""

# Replace placeholders safely
content = content.replace('NEW_METRICS_PLACEHOLDER', new_metrics)
content = content.replace('MISSING_METRICS_PLACEHOLDER', missing_metrics)
content = content.replace('BAD_DESCRIPTIONS_PLACEHOLDER', bad_descriptions)
content = content.replace('API_ERRORS_PLACEHOLDER', api_errors)
content = content.replace('VALIDATION_ISSUES_PLACEHOLDER', validation_issues)

# Write the final JSON
with open('slack_message.json', 'w') as f:
    f.write(content)
PYTHON_EOF

          echo "Slack message prepared for testing"

      - name: Display message payload (for debugging)
        run: |
          echo "📋 Message payload that will be sent:"
          echo "===================================="
          cat slack_message.json
          echo ""
          echo "===================================="

      - name: Send test Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "🚀 Sending test message to Slack..."

          # Send as form-encoded payload (Slack's preferred method)
          response=$(curl -X POST \
            --data-urlencode "payload@slack_message.json" \
            "$SLACK_WEBHOOK_URL" \
            -s -w "\nHTTP_STATUS:%{http_code}" \
            2>&1)

          http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
          body=$(echo "$response" | grep -v "HTTP_STATUS:")

          echo "Response body: $body"
          echo "HTTP status: $http_status"

          if [ "$http_status" = "200" ] && [ "$body" = "ok" ]; then
            echo "✅ Test message sent successfully!"
            echo "Check your #api-docs-events channel for the test message"
          else
            echo "❌ Failed to send test message"
            echo "Response: $body"
            echo "Status: $http_status"

            # Try fallback method
            echo ""
            echo "Trying fallback method (raw JSON body)..."
            response2=$(curl -X POST \
              -H 'Content-type: application/json' \
              --data @slack_message.json \
              "$SLACK_WEBHOOK_URL" \
              -s -w "\nHTTP_STATUS:%{http_code}" \
              2>&1)

            http_status2=$(echo "$response2" | grep "HTTP_STATUS:" | cut -d: -f2)
            body2=$(echo "$response2" | grep -v "HTTP_STATUS:")

            echo "Fallback response: $body2"
            echo "Fallback status: $http_status2"

            if [ "$http_status2" = "200" ] && [ "$body2" = "ok" ]; then
              echo "✅ Test message sent successfully via fallback!"
            else
              echo "❌ Both methods failed"
              exit 1
            fi
          fi